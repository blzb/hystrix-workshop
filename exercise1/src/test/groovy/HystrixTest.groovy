/*
 * This Spock specification was auto generated by running 'gradle init --type groovy-library'
 * by 'apimentel' at '3/27/16 12:43 AM' with Gradle 2.7
 *
 * @author apimentel, @date 3/27/16 12:43 AM
 */


import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext
import spock.lang.Specification
import ws.ns.hystrix.CommandHelloWorld
import ws.ns.hystrix.CommandWithCache
import ws.ns.hystrix.CommandWithFallback
import ws.ns.hystrix.CommandWithNetworkFallback

class HystrixTest extends Specification {
  def "should return hello world"() {
    setup:
      CommandHelloWorld commandHelloWorld = new CommandHelloWorld("Angel")
    when:
      String result = commandHelloWorld.execute();
    then:
      result == "Hello Angel!"
  }

  def "should use fallback"() {
    setup:
      CommandWithFallback commandWithFallback = new CommandWithFallback("Angel")
    when:
      String result = commandWithFallback.execute()
    then:
      result == "Hello Angel!"
      commandWithFallback.isFailedExecution()
      commandWithFallback.isResponseFromFallback()
  }

  def "should use cache"() {
    setup:
      CommandWithCache commandWithCacheA = new CommandWithCache("Angel")
      CommandWithCache commandWithCacheB = new CommandWithCache("Angel")
      HystrixRequestContext context = HystrixRequestContext.initializeContext()
    when:
      String resultA = commandWithCacheA.execute()
      String resultB = commandWithCacheB.execute()
    then:
      resultA == "Hello Angel!"
      resultB == "Hello Angel!"
      commandWithCacheA.isResponseFromCache() == false
      commandWithCacheB.isResponseFromCache() == true
    cleanup:
      context.shutdown()
  }

  def "should use remote cache"(){
    setup:
      CommandWithNetworkFallback commandWithNetworkFallbackA = new CommandWithNetworkFallback("Angel", false)
      CommandWithNetworkFallback commandWithNetworkFallbackB = new CommandWithNetworkFallback("Angel", true)
    when:
      String resultA = commandWithNetworkFallbackA.execute()
      String resultB = commandWithNetworkFallbackB.execute()
    then:
      resultA == "Hello Angel!";
      resultB == "Hello Angel!";
  }
}
